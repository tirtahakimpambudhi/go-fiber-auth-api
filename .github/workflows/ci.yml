on:
#  pull_request:
#    branches:
#      - master
#      - test
#      - dev
  push: #  ONLY DEBUG
    branches:
      - master
      - test
      - dev

jobs:
  build:
    name: "Lint, Test and Scan Dependencies"
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.1.0

      - name: Setup Go environment
        uses: actions/setup-go@v5.2.0
        with:
          go-version: "1.22.7"

      - name: Install OSV Scanner
        run: go install github.com/google/osv-scanner/cmd/osv-scanner@v1

      - name: Scan Dependencies
        run: make pkg_scan

      - name: Build API Docs
        run: |
          npm ci && npm run build

      - name: Running Lint Go
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.56.0
          args: --config .golangci.yaml

      - name: Running Unit Test Go
        run: go mod download && make tests

  smoke_test:
    name: "Smoke Test Container Of Image before Push to Registry"
    runs-on: ubuntu-22.04
    needs:
      - build
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Image
        run: |
          docker buildx build --load -t ${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}} \
          --build-arg username=${{secrets.APP_USER}} \
          --build-arg unique_id=${{secrets.APP_ID}} .
          
      - name: Verify Redis Connection ( DEBUG )
        run: |
          sudo apt-get update && sudo apt-get install -y redis-tools
          redis-cli -h localhost -p 6379 ping
          if [ $? -eq 0 ]; then
            echo "Redis connection successful"
          else
            echo "Redis connection failed"
            exit 1
          fi
          
      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/
          which migrate

      - name: Migrate Database
        run: make db_up DB_URL="postgresql://${{secrets.DB_USER}}:${{secrets.DB_PASSWORD}}@localhost:5432/${{secrets.DB_NAME}}?sslmode=disable"
      - name: Running Container
        run: |
          docker run -d \
            --network host  \
            --name ${{ secrets.CONTAINER_NAME }} \
            -e PORT=${{ secrets.PORT }} \
            -e CACHE_DB_HOST=${{ secrets.CACHE_DB_HOST }} \
            -e CACHE_DB_PORT=${{ secrets.CACHE_DB_PORT }} \
            -e CACHE_DB_MAX_CON=${{ secrets.CACHE_DB_MAX_CON }} \
            -e CACHE_DB_MIN_CON=${{ secrets.CACHE_DB_MIN_CON }} \
            -e CACHE_DB_MAX_TIME=${{ secrets.CACHE_DB_MAX_TIME }} \
            -e CACHE_DB_MIN_TIME=${{ secrets.CACHE_DB_MIN_TIME }} \
            -e MODEL_PATH=${{ secrets.MODEL_PATH }} \
            -e FIBER_HOST=${{ secrets.FIBER_HOST }} \
            -e FIBER_PORT=${{ secrets.FIBER_PORT }} \
            -e FIBER_PREFORK=${{ secrets.FIBER_PREFORK }} \
            -e FIBER_STRICT_ROUTING=${{ secrets.FIBER_STRICT_ROUTING }} \
            -e FIBER_CASE_SENSITIVE=${{ secrets.FIBER_CASE_SENSITIVE }} \
            -e FIBER_BODY_LIMIT=${{ secrets.FIBER_BODY_LIMIT }} \
            -e FIBER_READ_TIMEOUT=${{ secrets.FIBER_READ_TIMEOUT }} \
            -e FIBER_WRITE_TIMEOUT=${{ secrets.FIBER_WRITE_TIMEOUT }} \
            -e FIBER_REDUCE_MEMU=${{ secrets.FIBER_REDUCE_MEMU }} \
            -e FIBER_JSON=${{ secrets.FIBER_JSON }} \
            -e HASH_SALT=${{ secrets.HASH_SALT }} \
            -e LOG_PATH=${{ secrets.LOG_PATH }} \
            -e LOG_MAX_SIZE=${{ secrets.LOG_MAX_SIZE }} \
            -e LOG_MAX_BACKUP=${{ secrets.LOG_MAX_BACKUP }} \
            -e LOG_MAX_SIZE_ROTATE=${{ secrets.LOG_MAX_SIZE_ROTATE }} \
            -e LOG_TIME_FORMAT=${{ secrets.LOG_TIME_FORMAT }} \
            -e LOG_COLOR_OUTPUT=${{ secrets.LOG_COLOR_OUTPUT }} \
            -e LOG_QUOTE_STR=${{ secrets.LOG_QUOTE_STR }} \
            -e LOG_END_WITH_MESSAGE=${{ secrets.LOG_END_WITH_MESSAGE }} \
            -e DB_DRIVER=${{ secrets.DB_DRIVER }} \
            -e DB_PROTOCOL=${{ secrets.DB_PROTOCOL }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASS=${{ secrets.DB_PASSWORD }} \
            -e DB_MAX_CON=${{ secrets.DB_MAX_CON }} \
            -e DB_MIN_CON=${{ secrets.DB_MIN_CON }} \
            -e DB_MAX_TIME=${{ secrets.DB_MAX_TIME }} \
            -e DB_MIN_TIME=${{ secrets.DB_MIN_TIME }} \
            -e TOKEN_NAME=${{ secrets.TOKEN_NAME }} \
            -e SECRET_KEY_ACCESS_TOKEN=${{ secrets.SECRET_KEY_ACCESS_TOKEN }} \
            -e SECRET_KEY_REFRESH_TOKEN=${{ secrets.SECRET_KEY_REFRESH_TOKEN }} \
            -e SECRET_KEY_FP_TOKEN=${{ secrets.SECRET_KEY_FP_TOKEN }} \
            -e SECRET_KEY_CSRF=${{ secrets.SECRET_KEY_CSRF }} \
            -e SECRET_TEST_CLIENT=${{ secrets.SECRET_TEST_CLIENT }} \
            -e CACHE_TIMEOUT=${{ secrets.CACHE_TIMEOUT }} \
            -e DB_TIMEOUT=${{ secrets.DB_TIMEOUT }} \
            -e DOWN_STREAM_TIMEOUT=${{ secrets.DOWN_STREAM_TIMEOUT }} \
            -e CORS_ALLOW_METHODS=${{ secrets.CORS_ALLOW_METHODS }} \
            -e CORS_ALLOW_HEADERS=${{ secrets.CORS_ALLOW_HEADERS }} \
            -e CORS_EXPOSE_HEADERS=${{ secrets.CORS_EXPOSE_HEADERS }} \
            -e CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS }} \
            -e CORS_ALLOW_CREDENTIALS=${{ secrets.CORS_ALLOW_CREDENTIALS }} \
            ${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}}
      - name: Verify Container
        run: |
          sleep 10  # Give the application time to start  
          docker container ls -a | grep ${{secrets.CONTAINER_NAME}}
      - name: Check Container Logs
        run: docker logs ${{ secrets.CONTAINER_NAME }}
      - name: Check Container Network
        run: docker inspect ${{ secrets.CONTAINER_NAME }} | grep -i ipaddress
      - uses: matt-ball/newman-action@master
        with:
          collection: tests/end2end/auth_api_test.postman_collection.json
          environment: tests/end2end/auth_api_test.postman_environment.json
          reporters: '["emojitrain"]'
          delayRequest: 1000
          envVar: '[{ "key": "baseUrl", "value": "${{secrets.BASE_URL}}" },{"key":"secretTestClient","value":"${{secrets.SECRET_TEST_CLIENT}}"},{"key":"randomKSUID","value":"${{secrets.RANDOM_KSUID}}"}]'

  release:
    name: "Push to Registry"
    runs-on: ubuntu-22.04
    needs:
      - smoke_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Image and Push to Docker Registry
        run: |
          docker buildx build --push -t ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}} \
          --build-arg username=${{secrets.APP_USER}} \
          --build-arg unique_id=${{secrets.APP_ID}}
