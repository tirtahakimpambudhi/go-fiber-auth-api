on:
  pull_request:
    branches:
      - master
      - test
      - dev

jobs:
  setup:
    name: "Setup Environment Variable , Postgresql And Redis For CI"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        name: "Checkout Repository"

      - name: "Setting Environment Variable"
        run: |
          echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6739:6739
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

  build:
    name: "Lint, Test , Scan and Migrate DB"
    runs-on: ubuntu-22.04
    needs:
      - setup
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.1.0

      - name: Setup Go environment
        uses: actions/setup-go@v5.2.0

      - name: Scan Dependencies
        run: go install github.com/google/osv-scanner/cmd/osv-scanner@v1 && make pkg_scan

      - name: Build API Docs
        uses: |
          npm ci && npm run build

      - name: Running Lint GO
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.56.0
          args: --config .golangci.yaml

      - name: Running Unit Test Go
        run: go mod download && make tests

      - name: Migrate Database
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.18.0 && make db_up DB_URL="postgresql://${{secrets.DB_USER}}:${{secrets.DB_PASSWORD}}@localhost:5432/${{secrets.DB_NAME}}?sslmode=disable"

  smoke_test:
    name: "Smoke Test Container Of Image before Push to Registry"
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image
        run: |
          docker buildx build -t ${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}} \
          --build-arg username=${{secrets.APP_USER}} \
          --build-arg unique_id=${{secrets.APP_ID}}

      - name: Running Container
        run: |
          docker run -d \
            --name ${{ secrets.CONTAINER_NAME }} \
            -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            -e PORT=${{ secrets.PORT }} \
            -e CACHE_DB_HOST=${{ secrets.CACHE_DB_HOST }} \
            -e CACHE_DB_PASS=${{ secrets.CACHE_DB_PASS }} \
            -e FIBER_HOST=${{ secrets.FIBER_HOST }} \
            -e FIBER_PORT=${{ secrets.FIBER_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASS=${{ secrets.DB_PASS }} \
            -e SECRET_KEY_ACCESS_TOKEN=${{ secrets.SECRET_KEY_ACCESS_TOKEN }} \
            -e SECRET_KEY_REFRESH_TOKEN=${{ secrets.SECRET_KEY_REFRESH_TOKEN }} \
            -e SECRET_KEY_FP_TOKEN=${{ secrets.SECRET_KEY_FP_TOKEN }} \
            -e SECRET_KEY_CSRF=${{ secrets.SECRET_KEY_CSRF }} \
            -e SECRET_TEST_CLIENT=${{ secrets.SECRET_TEST_CLIENT }} \
            -e CORS_ALLOW_METHODS=${{ secrets.CORS_ALLOW_METHODS }} \
            -e CORS_ALLOW_HEADERS=${{ secrets.CORS_ALLOW_HEADERS }} \
            -e CORS_EXPOSE_HEADERS=${{ secrets.CORS_EXPOSE_HEADERS }} \
            -e CORS_ALLOW_CREDENTIALS=${{ secrets.CORS_ALLOW_CREDENTIALS }} \
            ${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}}

      - uses: matt-ball/newman-action@master
        with:
          collection: tests/end2end/auth_api_test.postman_collection.json
          environment: tests/end2end/auth_api_test.postman_environment.json
          reporters: '["emojitrain"]'
          delayRequest: 1000
          envVar: '[{ "key": "baseUrl", "value": "${{secrets.BASE_URL}}" },{"key":"secretTestClient","value":"${{secrets.SECRET_TEST_CLIENT}}"},{"key":"randomKSUID","value":"${{secrets.RANDOM_KSUID}}"}]'

  release:
    name: "Smoke Test and Push to Registry"
    runs-on: ubuntu-22.04
    needs:
      - smoke_test
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Image and Push to Docker Registry
        run: |
          docker buildx build --push -t ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}} \
          --build-arg username=${{secrets.APP_USER}} \
          --build-arg unique_id=${{secrets.APP_ID}}
