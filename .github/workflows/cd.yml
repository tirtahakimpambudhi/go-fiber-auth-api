on:
  push:
    branches:
      - master

jobs:
  migrate-db:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        name: Checkout Repository

      - name: Install Golang Migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/
          which migrate

      - name: Running Migrate DB
        run: make db_up DB_URL="${{secrets.PROD_POSTGRES_URL}}"

  deploy-job:
    needs:
      - migrate-db
    runs-on: ubuntu-latest
    env:
      SVC_ID: ${{ github.event.repository.name }}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - uses: actions/checkout@v4.2.2
        name: Checkout Repository

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.1.0

      - name: Install Railway Latest
        run: npm i -g @railway/cli@3.20.0

      - name: Check Railway
        run: railway --help

      - name: Railway Version
        run: railway --version

      - name: Check Services
        run: railway add --help

      - name: Check Status
        run: railway status

#      - name: Add Service Auth API to Railway
#        run: |
#          # Check if service exists
#          if ! railway service $SVC_ID 2>&1 | grep -q "Service \"$SVC_ID\" not found"; then
#            echo "Service $SVC_ID already exists, skipping add command"
#          else
#            echo "Service $SVC_ID not found, creating new service..."
#            railway add -s $SVC_ID \
#            -i ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.IMAGE_NAME}}:${{secrets.IMAGE_TAG}} \
#              -v PORT=${{ secrets.PORT }} \
#              -v CACHE_DB_NAME=${{ secrets.REDIS_NAME }} \
#              -v CACHE_DB_HOST=${{ secrets.PROD_REDIS_HOST }} \
#              -v CACHE_DB_PORT=${{ secrets.PROD_REDIS_PORT }} \
#              -v CACHE_DB_USER=${{ secrets.PROD_REDIS_USER }} \
#              -v CACHE_DB_PASS=${{ secrets.PROD_REDIS_PASSWORD }} \
#              -v CACHE_DB_MAX_CON=${{ secrets.REDIS_MAX_CON }} \
#              -v CACHE_DB_MIN_CON=${{ secrets.REDIS_MIN_CON }} \
#              -v CACHE_DB_MAX_TIME=${{ secrets.REDIS_MAX_TIME }} \
#              -v CACHE_DB_MIN_TIME=${{ secrets.REDIS_MIN_TIME }} \
#              -v MODEL_PATH=${{ secrets.MODEL_PATH }} \
#              -v FIBER_HOST=${{ secrets.FIBER_HOST }} \
#              -v FIBER_PORT=${{ secrets.FIBER_PORT }} \
#              -v FIBER_PREFORK=${{ secrets.FIBER_PREFORK }} \
#              -v FIBER_STRICT_ROUTING=${{ secrets.FIBER_STRICT_ROUTING }} \
#              -v FIBER_CASE_SENSITIVE=${{ secrets.FIBER_CASE_SENSITIVE }} \
#              -v FIBER_BODY_LIMIT=${{ secrets.FIBER_BODY_LIMIT }} \
#              -v FIBER_READ_TIMEOUT=${{ secrets.FIBER_READ_TIMEOUT }} \
#              -v FIBER_WRITE_TIMEOUT=${{ secrets.FIBER_WRITE_TIMEOUT }} \
#              -v FIBER_REDUCE_MEMU=${{ secrets.FIBER_REDUCE_MEMU }} \
#              -v FIBER_JSON=${{ secrets.FIBER_JSON }} \
#              -v HASH_SALT=${{ secrets.PROD_HASH_SALT }} \
#              -v LOG_PATH=${{ secrets.LOG_PATH }} \
#              -v LOG_MAX_SIZE=${{ secrets.LOG_MAX_SIZE }} \
#              -v LOG_MAX_BACKUP=${{ secrets.LOG_MAX_BACKUP }} \
#              -v LOG_MAX_SIZE_ROTATE=${{ secrets.LOG_MAX_SIZE_ROTATE }} \
#              -v LOG_TIME_FORMAT=${{ secrets.LOG_TIME_FORMAT }} \
#              -v LOG_COLOR_OUTPUT=${{ secrets.LOG_COLOR_OUTPUT }} \
#              -v LOG_QUOTE_STR=${{ secrets.LOG_QUOTE_STR }} \
#              -v LOG_END_WITH_MESSAGE=${{ secrets.LOG_END_WITH_MESSAGE }} \
#              -v DB_DRIVER=${{ secrets.POSTGRES_DRIVER }} \
#              -v DB_PROTOCOL=${{ secrets.POSTGRES_PROTOCOL }} \
#              -v DB_NAME=${{ secrets.PROD_POSTGRES_DB }} \
#              -v DB_HOST=${{ secrets.PROD_POSTGRES_HOST }} \
#              -v DB_PORT=${{ secrets.PROD_POSTGRES_PORT }} \
#              -v DB_USER=${{ secrets.PROD_POSTGRES_USER }} \
#              -v DB_PASS=${{ secrets.PROD_POSTGRES_PASSWORD }} \
#              -v DB_MAX_CON=${{ secrets.POSTGRES_MAX_CON }} \
#              -v DB_MIN_CON=${{ secrets.POSTGRES_MIN_CON }} \
#              -v DB_MAX_TIME=${{ secrets.POSTGRES_MAX_TIME }} \
#              -v DB_MIN_TIME=${{ secrets.POSTGRES_MIN_TIME }} \
#              -v TOKEN_NAME=${{ secrets.PROD_TOKEN_NAME }} \
#              -v SECRET_KEY_ACCESS_TOKEN=${{ secrets.PROD_SECRET_KEY_ACCESS_TOKEN }} \
#              -v SECRET_KEY_REFRESH_TOKEN=${{ secrets.PROD_SECRET_KEY_REFRESH_TOKEN }} \
#              -v SECRET_KEY_FP_TOKEN=${{ secrets.PROD_SECRET_KEY_FP_TOKEN }} \
#              -v SECRET_KEY_CSRF=${{ secrets.PROD_SECRET_KEY_CSRF }} \
#              -v SECRET_TEST_CLIENT=${{ secrets.PROD_SECRET_TEST_CLIENT }} \
#              -v CACHE_TIMEOUT=${{ secrets.REDIS_TIMEOUT }} \
#              -v DB_TIMEOUT=${{ secrets.POSTGRES_TIMEOUT }} \
#              -v DOWN_STREAM_TIMEOUT=${{ secrets.DOWN_STREAM_TIMEOUT }} \
#              -v CORS_ALLOW_METHODS=${{ secrets.CORS_ALLOW_METHODS }} \
#              -v CORS_ALLOW_HEADERS=${{ secrets.CORS_ALLOW_HEADERS }} \
#              -v CORS_EXPOSE_HEADERS=${{ secrets.CORS_EXPOSE_HEADERS }} \
#              -v CORS_ALLOW_ORIGINS=${{ secrets.PROD_CORS_ALLOW_ORIGINS }} \
#              -v CORS_ALLOW_CREDENTIALS=${{ secrets.CORS_ALLOW_CREDENTIALS }}
#          fi
#      - name: Running Service Auth API
#        run: railway up -s $SVC_ID -e ${{ secrets.RAILWAY_ENVIRONMENT }} -d